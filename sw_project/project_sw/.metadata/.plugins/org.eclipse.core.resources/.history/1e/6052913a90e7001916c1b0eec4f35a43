/*
 * mp_arith.c
 *
 */

#include <stdint.h>

// Calculates res = a + b.
// a and b represent large integers stored in uint32_t arrays
// a and b are arrays of size elements, res has size+1 elements
void mp_add1(uint32_t *a, uint32_t *b, uint32_t *res, uint32_t size)
{
	uint32_t carry=0;
	for (uint8_t i=0;i<size;i++){
		uint64_t sum=(uint64_t)a[i]+(uint64_t)b[i];
		res[i]=(uint32_t)sum+carry;
		carry = sum >>32 ;
		res[i+1]=carry;
		xil_printf("result1 0x%x\n\r", res[i]);
	}
}

void mp_add(uint32_t *a, uint32_t *b, uint32_t *res, uint32_t size)
{
	uint32_t carry =0;
	for(uint8_t i=0;i<size;i++){
		res[i]=(a[i]+b[i]+carry) % 4294967296;
		if ((a[i]+b[i]+carry)>=0) carry=0;
		else carry=1;
		xil_printf("result1 0x%x\n\r", res[i]);
	}
}

// Calculates res = a - b.
// a and b represent large integers stored in uint32_t arrays
// a, b and res are arrays of size elements
void mp_sub1(uint32_t *a, uint32_t *b, uint32_t *res, uint32_t size)
{
	for(uint8_t i=0;i<size;i++){
		if(a[i] > b[i]) {
			res[i] = a[i] - b[i];
		}
		else if (a[i]<b[i]) {
			uint64_t carry =1;
			carry =carry<<32;
			(uint64_t)a;
			a=(uint64_t)a[i]+ (uint64_t)(carry);
			res[i]=(uint64_t)a-(uint64_t)b[i];
			a[i+1]=a[i+1]-1;
		}
		xil_printf("result1 0x%x\n\r", res[i]);
	}
}
void mp_sub(uint32_t *a, uint32_t *b, uint32_t *res, uint32_t size)
{
	int carry =0;
	for(uint8_t i=0;i<size;i++){

		res[i]=(a[i]-b[i]+carry) ;//% 4294967296;
		xil_printf("carry=%d [0x%x - 0x%x] [%ld] ", carry, a[i], b[i], res[i]);
		//if (carry<0) {res[i]=res[i]-1;}
		if ((a[i])>=b[i]) {carry=0;}
		else {
			res[i]=4294967296+res[i] ;
			carry=-1;
			xil_printf("*negative number* carry  =-1 ");
		}
		xil_printf("result1 [0x%x] \n\r",res[i]);
	}
}

void mp_sub2(uint32_t *a, uint32_t *b, uint32_t *res, uint32_t size)
{
	int carry =0;
	for(uint8_t i=0;i<size;i++){
		if ((a[i]-b[i]+carry)>=0) {res[i] = a[i] - b[i] + carry ;carry=0; }
		else {res[i]=4294967296+ a[i] - b[i] +carry  ;carry=-0x1;}
		xil_printf("result1 [0x%x] \n\r",res[i]);
	}
}

// Calculates res = (a + b) mod N.
// a and b represent operands, N is the modulus. They are large integers stored in uint32_t arrays of size elements
void mod_add(uint32_t *a, uint32_t *b, uint32_t *N, uint32_t *res, uint32_t size)
{
	xil_printf("Debug 1\n\r");
	uint32_t carry=0;
	for (uint8_t i=0;i<size;i++){
			uint64_t sum=(uint64_t)a[i]+(uint64_t)b[i];
			res[i]=(uint32_t)sum+carry;
			carry = sum >>32 ;
			res[i+1]=carry;
			//xil_printf("Debug-- [%d] res [ 0x%x]\n\r", i,res[i]);
			//xil_printf("Carry [ 0x%x]\n\r", carry);
		}


	uint32_t t[32];
	if (res[33]>0 || res[32]>N[32]){
		mp_sub(&res,&N,&t, size);
	}

	for (uint8_t i=0;i<=size;i++){
			xil_printf("result1 0x%x\n\r", t[i]);
		}



}

// Calculates res = (a - b) mod N.
// a and b represent operands, N is the modulus. They are large integers stored in uint32_t arrays of size elements
void mod_sub(uint32_t *a, uint32_t *b, uint32_t *N, uint32_t *res, uint32_t size)
{

}

