/*
 * mp_arith.c
 *
 */

#include <stdint.h>

// Calculates res = a + b.
// a and b represent large integers stored in uint32_t arrays
// a and b are arrays of size elements, res has size+1 elements
void mp_add(uint32_t *a, uint32_t *b, uint32_t *res, uint32_t size)
{
	uint32_t carry=0;
	for (uint8_t i=0;i<size;i++){
		uint64_t sum=(uint64_t)a[i]+(uint64_t)b[i];
		res[i]=(uint32_t)sum+carry;
		carry = sum >>32 ;
		res[i+1]=carry;
	}
}

// Calculates res = a - b.
// a and b represent large integers stored in uint32_t arrays
// a, b and res are arrays of size elements
void mp_sub(uint32_t *a, uint32_t *b, uint32_t *res, uint32_t size)
{
	for ((uint8_t i=0;i<size;i++)){
		if(a[i] > b[i]) {
			res[i] = a[i] - b[i];
		}
		else if (a[i]<b[i]) {
			(uint64_t) a[i]=(uint64_t) a[i]+  1<<32;
			(uint64_t)res[i]=(uint64_t)a[i]-(uint64_t)b[i];
			a[i+1]=a[i+1]-1;
		}

	}
}

// Calculates res = (a + b) mod N.
// a and b represent operands, N is the modulus. They are large integers stored in uint32_t arrays of size elements
void mod_add(uint32_t *a, uint32_t *b, uint32_t *N, uint32_t *res, uint32_t size)
{

}

// Calculates res = (a - b) mod N.
// a and b represent operands, N is the modulus. They are large integers stored in uint32_t arrays of size elements
void mod_sub(uint32_t *a, uint32_t *b, uint32_t *N, uint32_t *res, uint32_t size)
{

}

